<?php

namespace App\Controller;

use App\Form\CategoryType;
use App\Repository\CategoryRepository;
use App\Repository\GuideRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Annotation\Route;
use App\Entity\Guide;
use Symfony\Component\HttpFoundation\Request;
use Doctrine\Common\Persistence\ObjectManager;
use App\Form\GuideType;
use App\Entity\Comment;
use App\Form\CommentType;
use Symfony\Component\Validator\Constraints\DateTime;


class GuideController extends AbstractController
{
    /**
     * @Route("/blog", name="blog")
     */
    public function allGuide(GuideRepository $guideRepository)
    {

        $guides = $guideRepository->findByDate();
        return $this->render('guide/showAll.html.twig', [
            'guides' => $guides
        ]);
    }

    /**
     * @Route("/admin/admin_guide", name="admin_guide")
     */
    public function adminGuide(GuideRepository $repo)
    {

        $guides = $repo->findAll();
        return $this->render('guide/adminGuide.html.twig', [
            'guides' => $guides
        ]);
    }

    /**
     * @Route ("/blog/{id}", name="blog_show")
     */
    public function showGuide(Guide $guide, Request $request, ObjectManager $manager)
    {
        $comment = new Comment();
        $form = $this->createForm(CommentType::class, $comment);
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            $comment->setCreatedAt(new \DateTime());
            $comment->setGuide($guide);
            $manager->persist($comment);
            $manager->flush();
            return $this->redirectToRoute('blog_show', ['id' => $guide->getId()]);
        }

        return $this->render('guide/showGuide.html.twig', [
            'guide' => $guide,
            'commentForm' => $form->createView()
        ]);
    }

    /**
     * @Route("/admin/new", name="add_guide")
     * @Route("/admin/{id}/edit",name="edit_guide")
     */
    public function addGuide(Guide $guide = null, Request $request, ObjectManager $manager)
    {
        if (!$guide) {
            $guide = new Guide();
        }
        $form = $this->createForm(GuideType::class, $guide);
        $form->handleRequest($request);
        if ($form->isSubmitted() && $form->isValid()) {
            if (!$guide->getId()) {
                $guide->setCreatedAt(new \DateTime());
            }
            $file = $form->get('Image')->getData();
            $fileName = $this->generateUniqueFileName() . '.' . $file->guessExtension();
            try {
                $file->move(
                    $this->getParameter('images_directory'),
                    $fileName
                );
            } catch (FileException $e) {
                // ... handle exception if something happens during file upload
            }
            $guide->setImage($fileName);


            $manager->persist($guide);
            $manager->flush();
            return $this->redirectToRoute('blog_show', ['id' => $guide->getId()]);
        }
        return $this->render('guide/addGuide.html.twig', [
            'formGuide' => $form->createView(),
            'editMode' => $guide->getId() !== null
        ]);
    }

    /**
     * @Route("/admin/{id}/delete", name="delete")
     */
    public function deleteGuide($id, GuideRepository $repo, ObjectManager $manager)
    {

        $guide = $repo->find($id);
        if (!$guide) {
            return $this->redirectToRoute('admin_guide');
        }

        $manager->remove($guide);
        $manager->flush();

        return $this->redirectToRoute('admin_guide');
    }

    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

}
